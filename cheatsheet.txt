
Data Types (CS-ASP_007)
=======================
Comments:  // Single line ... /* Multiline */

string => alphanumeric (defaults to "")
int => 2 billion to -2 billion (defaults to 0)
double => fractional value (defaults to 0.0)
bool => true or false (defaults to false) Boolean

More: http://is.gd/data_types


Data Type Converstion (CS-ASP_008)
==================================
Implicit conversions - smaller type to larger type
without data loss, "upcasting"

Explicit conversions - require developer intervention
possibility of data loss, "downcasting", either in
the form of cast() or using a helper method.

Casting numbers:
int myInteger = (int)myDouble;

Number to strings:
string myString = myInteger.ToString();

String to Numbers:
int myInteger = int.Parse(myString);

More: http://is.gd/datatype_conversion


Arithmatic Operators (CS-ASP_009)
=================================
= NOT equality, it's assignment

Math Operators: + - * /

Addition Assignment
total = total + 5;
total += 5;

increment operator: i++;
Decrement Operator: i--;

Beware of order of precedence (use parenthesis) PEMDAS
Beware of down casting (you'll lose precision)
Beware of overflow (use bigger types)

To make overflow throw an exception:

checked
{
	// some arithmatic operation
	// that could potentially overflow
}

C# Syntax (CS-ASP_010)
======================
Operands - variable names, object / server control 
names, literals - "Nouns" (you name these)

Operators - "Verbs ... they act on the operands.

http://is.gd/operators

Expressions - One or more operands and zero or more 
operators that evaluate to a single value

http://is.gd/expressions

Statements - A complete instruction - assignment of an expression to a variable, an increment/ decrement, etc.

http://is.gd/statement

Statements must end in a semi-colon ;
Whitespace is ignored (Use for humans)

Conditional if ... else if ... else Statement (CS-ASP_011)
==========================================================
= Assignment
== Equality

if (a==b)
{
   // execute when the expression is true
}
else
{
   // executes when the expression is false
}

... or ... evaluate other mutually exclusive options:

if (a == b) { // some code }
else if (a == c) { // some code }
else if (a == d) { // some code }
else { // catch all}

CheckBox Server Control = Checked prop is bool

RadioButton Server Control = GroupName prop groups
them together, check prop is bool


Conditional Ternary Operator (CS-ASP_012)
=========================================
Shortcut for evaluating an expression and
returning a result.
result = (a == b) ? "Equal" : "Not Equal";


Comparison and Logical Operator (CS-ASP_013)
============================================
Comparison Operators
used for conditional statements
==
!=
< >
<= >=
!someBooleanValue - means NOT is true

Logical Operators
used to combine multiple expressions / evaluation

&& - AND if x and y are true, pass command
|| - OR if x or y is true, pass command

Combine with parenthesis ( ) for order of precedence


Working with Dates and Times (CS-ASP_014)
=========================================

Creating new DateTime objects
DateTime myDateTime = DateTime.Now;
DateTime myDateTime = DateTime("10/24/1993");

Formatting ... many options:
myDateTime.To_____()

Retrieving Parts:
myDateTime.Year // int
myDateTime.Hour // int
myDateTime.DayOfWeek // "Monday" string
myDateTime.DayOfYear // int ex. 22

DateTime Math:
myDateTime.AddHour(3)
myDateTime.AddMinute(-5)

"Chaining" = using multiple helper methods
together with the . operator
myDateTime.AddHour(3).AddMinute(-5).ToString()


Working with Spans of Time (CS-ASP_015)
=======================================

Create and initialize new TimeSpans

// Days.Hours:Minutes:Seconds.Milliseconds
TimeSpan myTimeSpan = TimeSpan.Parse("1.2:3:30.5")
				    ("day.hour:minute:seconds")
DateTime myBirthday = DateTime.Parse("12/7/1969");
TimeSpan myAge = DateTime.Now.Subtract(myBirthday);

More info at http://is.gd/timespan

Get individual parts of TimeSpans
myAge.Hours
myAge.Seconds

... or get TOTAL elapsed time
as a double representing both
the number of days / hours / etc.
AND fractional values representing
"left overs".

myTimeSpan.TotalDays // double
myTimeSpan.TotalHours // double



Formatting Strings (CS-ASP_019)
===============================
Concatenate Strings
+ +=

String.Format("Hello {0}. You are from {1}", "Bob", "Chicago")

Format Numbers
String.Format("Reference Code: {0:000_000-0}", 1234567)
123_456-7

Formatting Dates
http://is.gd/formattingdates
String.Format("Reference Date: {0:ddd - d, MM, YYYY}", someDate)
Tue - 5,07, 2014

Formatting Currency
http://is.gd/formattingcurrency
String.Format("Total: {0:C}", totalAmount);
$50,000.00
:C










